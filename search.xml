<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[类方法和静态方法]]></title>
    <url>%2F2018%2F08%2F04%2F%E7%B1%BB%E6%96%B9%E6%B3%95%E5%92%8C%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[类方法 @classmethod 类方法是操作类的方法，类方法属于类，不属于该类创建的对象 说明: 类方法需要使用@classmethod装饰器定义 类方法的第一个参数用来绑定类，约定写为cls 类和对象实例都可以调用类方法 类方法不能访问此类创建的对象的属性 使用了@classmethod修饰的方法是类专属的，而且是可以通过类名进行调用的。为了能够展示其与一般方法的差异，写一段简单的代码如下： 1234567891011121314class DemoClass: @classmethod def classPrint(self): print("class method") def objPrint(self): print("obj method")if __name__=="__main__": obj = DemoClass() obj.objPrint() obj.classPrint() DemoClass.classPrint() DemoClass.objPrint() obj method class method class method --------------------------------------------------------------------------- TypeError Traceback (most recent call last) &lt;ipython-input-2-9f1a4cb12823&gt; in &lt;module&gt;() 12 obj.classPrint() 13 DemoClass.classPrint() ---&gt; 14 DemoClass.objPrint() TypeError: objPrint() missing 1 required positional argument: &apos;self&apos; 静态方法 ＠staticmathod 静态方法是定义在类的内部的函数，此函数作用域是类的内部 说明: 静态方法需要使用@staticmethod装饰器定义 静态方法与普通函数的定义相同，不需要传入self和cls 静态方法只能凭借该类和实例来调用 静态方法不能访问类变量和实例变量 123456789class A: @staticmethod def myadd(a, b): return a + bif __name__=="__main__": print(A.myadd(100, 200)) a = A() print(a.myadd(300, 400)) 300 700 Static Method 那么@staticmethod呢？其实它跟@classmethod非常相似，只是它没有任何必需的参数。 假设我们要去检验一个日期的字符串是否有效。这个任务与Date类相关，但是又不需要Date实例对象，在这样的情况下@staticmethod就可以派上用场了。如下： 12345678910111213141516class Date(object): def __init__(self, day=0, month=0, year=0): self.day = day self.month = month self.year = year @staticmethod def is_date_valid(date_as_string): day, month, year = map(int, date_as_string.split('-')) return day &lt;= 31 and month &lt;= 12 and year &lt;= 3999 if __name__=="__main__": # usage: is_date = Date.is_date_valid('11-09-2012') print(is_date) True 从上面的用法可以看出，它只是一个功能，调用的语法和一般的方法调用一样，也不访问实例对象那和它的内部字段和方法。]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>calssmethod</tag>
        <tag>staticmethod</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[爬虫Xpath,css语法]]></title>
    <url>%2F2018%2F07%2F27%2Fscrapy%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>scrapy</tag>
        <tag>爬虫</tag>
        <tag>Xpath</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql 基础命令(一)]]></title>
    <url>%2F2018%2F07%2F21%2Fmysql%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4(%E4%B8%80)%2F</url>
    <content type="text"><![CDATA[1、MySQL概述 1、什么是数据库 数据库是一个存储数据的仓库 2、都有哪些公司在用数据库 金融机构、游戏网站、购物网站、论坛网站 … … 3、提供数据库服务的软件 1、软件分类 MySQL、SQL_Server、Oracle、Mariadb、DB2、MongoDB … 2、在生产环境中，如何选择使用哪个数据库 1、是否开源 开源软件：MySQL、Mariadb、MongoDB 商业软件：Oracle、DB2、SQL_Server 2、是否跨平台 不跨平台：SQL_Server 跨平台：MySQL、Mariadb、MongoDB、DB2、Oracle 3、公司的类型 商业软件：政府部门、金融机构 开源软件：游戏网站、购物网站、论坛网站… … 4、MySQL的特点 1、关系型数据库 1、关系型数据库的特点 1、数据是以行和列的形式去存储的 2、这一系列的行和列称为表 3、表中的每一行叫一条记录 4、表中的每一列叫一个字段 5、表和表之间的逻辑关联叫关系 2、示例 1、关系型数据库存储 表1、学生信息表 姓名 年龄 班级 牛郎 25 AID1803 织女 23 AID1801 表2、班级信息表 班级 班主任 AID1803 卢大大 AID1801 孙大大 2、非关系型数据库中存储 {“姓名”:”牛郎”,”年龄”:25,”班级”:”AID1803”,”班主任”:”卢大大”} {“姓名”:”织女”,”年龄”:25,”班级”:”AID1803”} 2、跨平台 可以在Unix、Linux、Windows上运行数据库服务 3、支持多种编程语言 Python、java、php … …2、MySQL的安装12345678910111213141516171819202122 1、Ubuntu安装MySQL服务 RedHat(红帽)、CentOS、Ubuntu 1、安装服务端 sudo apt-get install mysql-server 2、安装客户端 sudo apt-get install mysql-client 2、Windows安装MySQL服务 1、下载MySQL安装包(windows) mysql-installer***5.7.***.msi 2、双击、按照教程安装即可3、启动和连接MySQL服务 1、服务端启动 1、查看MySQL服务状态 sudo /etc/init.d/mysql status 2、停止、启动、重启MySQL服务 sudo /etc/init.d/mysql stop | start | restart 2、客户端连接 1、命令格式 mysql -h主机地址 -u用户名 -p密码 mysql -hlocalhost -uroot -p123456 2、本地连接可以省略 -h 选项 mysql -u用户名 -p密码 mysql -uroot -p123456 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151161171181191201211221231241251261271281291301311321331341351361371381391401411421431441451461471481491501511521531541551561571581591601611621631641651661671681691701711721731741751761771781791801811821831841851861871881891901911921931941951961971981992002012022032042052062072082092102112122132142152162172182192202212222232242252262272282292302312322332342352362372382392404、基本SQL命令 1、SQL命令的使用规则 1、每条SQL命令必须以 ; 结尾 2、SQL命令不区分字母大小写 3、使用 \c 来终止命令的执行 (Linux中 ctrl + c) 2、库的管理 1、库的基本操作 1、查看已有的库 show databases; 2、创建库(指定默认字符集) create database 库名 default charset=utf8; 3、查看创建库的语句 show create database 库名; 4、查看当前所在库 select database(); 5、切换库 use 库名; 6、查看库中已有表 show tables; 7、删除库 drop database 库名; 2、库名的命名规则 1、可以使用数字、字母、_,但不能使用纯数字 2、库名区分字母大小写 3、库名具有唯一性 4、不能使用特殊字符和MySQL关键字 3、练习 1、创建库AID,指定字符集为utf8 create database AID default charset=utf8; 2、切换到该库AID use AID; 3、查看当前所在库 select database(); 4、查看库中已有的表 show tables; 5、查看AID的字符集(查看创建库的语句) show create database AID; 6、删除库AID drop database AID; 3、表的管理 1、表的基本操作 1、创建表(指定字符集) create table 表名( 字段名 数据类型, 字段名 数据类型, ... ... ); 2、查看创建表的语句(字符集) show create table 表名; 3、查看表结构 desc 表名; 4、删除表 drop table 表名; 2、表的命名规则(同库的命名规则) 3、练习​```mysql 1、创建库 python create database python; 2、在库 python 中创建表 py_mysql,指定字符集utf8 表中字段有 id int 和 name char(20) 两个字段 use python; create table py_mysql( id int, name char(20) )default charset=utf8; 3、查看表 py_mysql 的字符集以及存储引擎 show create table py_mysql; 4、查看 py_mysql 的表结构 desc py_mysql; 5、删除表 py_mysql drop table py_mysql; 4、注意 1、所有的数据都是以文件的形式存放在数据库目录下 2、数据库目录：/var/lib/mysql5、更改库、表的默认字符集 1、方法 通过更改MySQL服务的配置文件来实现 2、步骤 1、获取root权限 sudo -i 2、切换到配置文件所在路径 cd /etc/mysql/mysql.conf.d 3、备份 cp -p mysqld.cnf mysqld.cnf.bak (-p选项连同原文件权限一起复制) 4、用vi打开mysqld.cnf vi mysqld.cnf [mysqld] character_set_server = utf8 保存退出 a -&gt; 写入 -&gt; ESC -&gt; shift + : -&gt; wq 5、重启mysql服务 /etc/init.d/mysql restart | reload(重载配置文件) 6、退出超级用户 exit 7、登录到mysql验证：mysql -uroot -p123456 create database 库名; show create database 库名;6、表记录管理 1、在表中插入记录 1、insert into 表名 values(值1),(值2),...,(值N); 2、insert into 表名(字段名列表) values(值1),...(值N); 2、查询表记录 1、select * from 表名; 2、select 字段1,字段名2,...,字段名N from 表名; 3、练习 1、查看所有的库 : show databases; 2、创建新库 stu1 : create database stu1; 3、在库 stu1 中创建表 students ,字段要求如下 1、id int 2、name char(15) 3、age int 4、address char(20) 4、查看表 students 的表结构: desc students; 5、在表中插入一条记录(行) insert into students values(1,&quot;Tom&quot;,25,&quot;Beijing&quot;); 6、在表中一次性插入2条记录(行) insert into students values(...),(...); 7、查看所有表记录 : select * from students; 8、删除表 students : drop table students; 9、删除库 stu1 : drop database stu1;7、客户端把数据存储到数据库服务器上的过程 1、连接到数据库服务器 ： mysql -uroot -p123456 2、选择一个库 ：use 库名; 3、创建表或者修改表 ：create ... 4、断开与数据库服务器的连接 ：exit | quit | \q8、名词介绍 1、DB (database) DB就是数据库,存储数据的仓库 2、DBMS(database management system) 数据库管理系统 管理数据库的软件：MySQL、Oracle、MongoDB ... ... 3、DBS(database system) 数据库系统 DBS = DB(存储) + DBMS(数据库软件) + 数据库应用(财务管理系统、人事管理系统) + 用户9、数据类型 1、数值类型(有符号signed和无符号unsigned) 1、整型 1、int 大整型(4个字节) 取值范围：0 ~ 2 ** 32 -1(42亿多) 2、tinyint 微小整型(1个字节) 1、有符号(signed默认): -128 ~ 127 2、无符号(unsigned): 0 ~ 255 3、smallint 小整型(2个字节) 取值范围：0 ~ 65535 4、bigint 极大整型(8个字节) 取值范围：0 ~ 2 ** 64 - 1 2、浮点型 1、float(4个字节,最多显示7个有效位) 1、用法 字段名 float(m,n) m:表示总位数 n:小数位位数 salary float(5,2) 取值范围？ -999.99 ~ 999.99 2、注意 1、浮点型插入整数时会自动补全小数位位数 2、小数位如果多于指定的位数,会对指定位的下一位进行四舍五入 float(5,2) -&gt; 23.128 -&gt; 23.13 2、double(8个字节,最多显示15个有效位) 1、用法 字段名 double(m,n) 3、decimal(M+2个字节,最多显示28个有效位) 1、用法 decimal(28,5) 2、字符类型 1、char(定长) 1、取值范围：1 ~ 255 2、不给定宽度默认为 1 2、varchar(变长) 1、取值范围：1 ~ 65535 2、注意 1、varchar没有默认宽度,必须给定一个宽度值 name varchar(20) 3、char 和 varchar 的特点 1、char 浪费存储空间,但是性能高 2、varchar 节省存储空间,但是性能低 4、练习 1、创建表stuinfo,字段要求如下： 学号：id 大整型 id int, 姓名：name 变长,宽度为15 name varchar(15), 班级：classes 定长,宽度为7 classes char(7), 年龄：age 微小整型,要求不能输入负数 age tinyint unsigned, 身高：height 浮点型,小数位为2位 heigit float(5,2) 2、查看表结构 : desc stuinfo 3、在表 stuinfo 中插入2条记录(行) insert into stuinfo values (1,&quot;张三丰&quot;,&quot;AID1803&quot;,23,175.00) 4、查询所有表记录 select * from stuinfo; 5、查询所有学生的姓名、年龄和身高 select name,age,height from stuinfo; 3、枚举类型 1、定义 字段值只能在列举的范围内选择 2、enum(...) 单选(最多有65535个不同的值) 字段名 enum(值1,值2,...,值N) 3、set(...) 多选(最多有64个不同的值) 字段名 set(值1,值2,...,值N) 插入记录时 &quot;Python,boy,Mysql&quot; 4、日期时间类型 1、year ：年 YYYY 2、date ：日期 YYYYMMDD 3、time ：时间 HHMMSS 4、datetime ：日期时间 YYYYMMDDHHMMSS 5、timestamp ：日期时间 YYYYMMDDHHMMSS create table t6( id int, name varchar(15), age tinyint unsigned, birth_year year, birthday date, class time, meeting datetime )default charset=utf8; insert into t6 values (1,&quot;武松&quot;,40,1979,19790520,090000,20180504000000); select * from t6; 6、注意 1、插入记录时datetime字段不给值默认返回NULL 2、插入记录时timestamp字段不给值默认返回系统当前时间10、表字段的操作 1、语法：alter table 表名 执行动作; 1、添加字段 alter table 表名 add 字段名 数据类型 first | after 字段名; 2、删除字段 alter table 表名 drop 字段名; 3、修改字段数据类型 alter table 表名 modify 字段名 新数据类型; # 修改数据类型时会受到表中原有数据的限制 4、修改字段名 alter table 表名 change 旧名 新名 数据类型; 5、修改表名 alter table 表名 rename 新表名;1、面试题 1、填空题 1、MySQL中的数据类型有 ____ _____ ____ _____ 2、关系型数据库的核心内容是 __关系__ 即 _二维表_ 2、简答题 1、简述客户端把数据存储到数据库服务器上的过程 2、char和varchar的区别？各自的特点？]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Numpy(1)]]></title>
    <url>%2F2018%2F07%2F20%2FNumpy%2F</url>
    <content type="text"><![CDATA[Numpy 1.Numrical Python,数值的python,应用于数值分析领域的python语言工具 2.Numpy是一个开源的科学计算库 3.Numpy弥补了作为通用编程语言的Python在数值计算方面,能力面,速度慢的不足 4.Numpy拥有丰富的数学函数,强大的多维数组和优异的运算性能 5.Numpy与Scipy、scikit、matplotlib等其他科学计算库可以很好的协调工作 6.Numpy可以取代matlab等工具,允许用户进行快速开发的同时完成交互式的原型设计。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061# _*_ coding:utf-8 _*_# __author__ = 'Fan'# __date__ = '2018/7/20 0020 上午 9:35'from __future__ import unicode_literalsimport numpy as npimport datetime as dtn = 100000start = dt.datetime.now()A,B = [],[]for i in range(n): A.append(i ** 2) B.append(i ** 2)C = []for a,b in zip(A,B): C.append(a+b)print('正常运行时间:',(dt.datetime.now()-start).microseconds)start = dt.datetime.now()c = np.arange(n) ** 2 + np.arange(n) ** 3print('用Numpy运行后的时间:',(dt.datetime.now()-start).microseconds)# _*_ coding:utf-8 _*_# __author__ = 'Fan'# __date__ = '2018/7/20 0020 上午 9:35'from __future__ import unicode_literalsimport numpy as npimport datetime as dtn = 100000start = dt.datetime.now()A,B = [],[]for i in range(n): A.append(i ** 2) B.append(i ** 2)C = []for a,b in zip(A,B): C.append(a+b)print('正常运行时间:',(dt.datetime.now()-start).microseconds)start = dt.datetime.now()c = np.arange(n) ** 2 + np.arange(n) ** 3print('用Numpy运行后的时间:',(dt.datetime.now()-start).microseconds) 正常运行时间: 94000 用Numpy运行后的时间: 0 正常运行时间: 90000 用Numpy运行后的时间: 0 多维数组 1.numpy中的多维数组是numpy.ndarray类类型的对象,可用于表示数据结构中的任意维度的数组 2.创建多维数组对象numpy.arange(起始，终止，步长)-&gt; 一维数组,首元素就是起始值,尾元素在终止值之前的最后一个元素,步长即每次递增的公差。缺省起始值默认为0,缺省步长默认为1,numpy.array(任意可被解释为数组的容器) 3.内存连续,元素同质 4.numpy.dtype属性表示元素的数据类型,通过dtype参数和astype()方法可以指定和修改元素的数据类型。 5.ndarray.shape属性表示数组的维度(高维度数,…..,低维度数) 12345678910111213141516171819202122232425262728293031323334353637383940# _*_ coding:utf-8 _*_# __author__ = 'Fan'# __date__ = '2018/7/20 0020 上午 10:05'from __future__ import unicode_literalsimport numpy as npa = np.arange(10)print(a)b = np.arange(1,10)print(b)c = np.arange(1,10,2)print(c)d = np.array([])print(d)e = np.array([10,20,30,40,50])print(e)f = np.array([ [1,2,3], [4,5,6]])print(f)print(type(f))print(type(f[0][0]))print(f.dtype)g = np.array(['1','2','3'],dtype=np.int32)print(type(g[0]))print(g.dtype)h = g.astype(np.str_)print(h.dtype)print(type(h[0]))print(e.shape) [0 1 2 3 4 5 6 7 8 9] [1 2 3 4 5 6 7 8 9] [1 3 5 7 9] [] [10 20 30 40 50] [[1 2 3] [4 5 6]] &lt;class &apos;numpy.ndarray&apos;&gt; &lt;class &apos;numpy.int32&apos;&gt; int32 &lt;class &apos;numpy.int32&apos;&gt; int32 &lt;U11 &lt;class &apos;numpy.str_&apos;&gt; (5,) 6.元素索引 数组[索引]数组[行索引][列索引]数组[页索引][行索引][列索引]数组[页索引,行索引,列索引] 12345678from __future__ import unicode_literalsimport numpy as npi = np.array([ [np.arange(1,5),np.arange(5,9),np.arange(9,13)], [np.arange(13,17), np.arange(17,21), np.arange(21,25)],])print(i.shape) (2, 3, 4) 7.numpy的内置类型和自定义类型 1)numpy的内置类型bool_1int8 1字节有符号整型,-128-127int16 2字节有符号整型int32 4字节有符号整型int64 8字节有符号整型uint8 1字节无符号整型, 0-255uint16 2字节无符号型uint32 4字节无符号型uint64 8字节无符号型float16 2字节浮点型float32 4字节浮点型float64 8字节浮点型comlex64 8字节复数型complex128 16字节复数型str_ 字符串型2）自定义类型通过dtype将多个相同或者不同的numpy内置类型组合成某种复合类型,用于数组的元素的数据类型,除了使用内置类型的全称以外还可以通过类型编码字符串简化类型的说名numpy.int8 -&gt; i1numpy.int16 -&gt; i2numpy.int32 -&gt; i3numpy.int64 -&gt; i4numpy.uint32 -&gt; u4numpy.float64 -&gt; f8numpy.complex128 -&gt; c16对于多字节整数可以加上字节序前缀:&lt; 小端字节序,低数位低地址 98 0x1234 L(低) H(高) 0x34 0x12 = 处理器系统默认 &gt; 大端字节序,低数位高地址 L(低) H(高) 0x12 0x34 numpy 1234import numpy as npa = np.int8print(a) &lt;class &apos;numpy.int8&apos;&gt; 12345678from __future__ import unicode_literalsimport numpy as npa = np.array([('abc',[1,2,3])],dtype='U3,3i4')print(a)print(a[0]['f0'])print(a[0]['f1'][0])print(a[0]['f1'][1])print(a[0]['f1'][2]) [(&apos;abc&apos;, [1, 2, 3])] abc 1 2 3 1234567891011from __future__ import unicode_literalsimport numpy as npb = np.array([('abc',[1,2,3])],dtype=[ ('name',np.str_,3),('score',np.int32,3)] )print(b)print(b[0]['name'])print(b[0]['score'][0])print(b[0]['score'][1])print(b[0]['score'][2]) [(&apos;abc&apos;, [1, 2, 3])] abc 1 2 3 1234567891011121314from __future__ import unicode_literalsimport numpy as npc = np.array([('abc',[1,2,3])],dtype=&#123; 'names':['name','score'], 'formats':['U3','3i4']&#125; )print(c)print(c[0]['name'])print(c[0]['score'][0])print(c[0]['score'][1])print(c[0]['score'][2]) [(&apos;abc&apos;, [1, 2, 3])] abc 1 2 3 1234567891011121314from __future__ import unicode_literalsimport numpy as npd = np.array([('abc',[1,2,3])],dtype=&#123; 'name': ('U3',0), 'score': ('3i4',12)&#125; )print(d)print(d[0]['name'])print(d[0]['score'][0])print(d[0]['score'][1])print(d[0]['score'][2]) [(&apos;abc&apos;, [1, 2, 3])] abc 1 2 3 12345678910from __future__ import unicode_literalsimport numpy as npe = np.array([0x1234],dtype=( '&gt;u2',&#123;'lo':('u1',0), 'hi':('u1',1), &#125;))print('&#123;:x&#125;'.format(e[0]))print('&#123;:x&#125; &#123;:x&#125;'.format(e['lo'][0],e['hi'][0])) 1234 12 34 8.切片 数组[起始:终止:步长,起始:终止:步长,……]缺省起始: 首(步长为正)、尾(步长为负)缺省终止: 尾后(步长为正)、首前（步长为负)缺省步长: 默认为1靠近端部的一个或几个连续的维度使用缺省切片,可以用”…”表示. 12345678910111213141516171819202122232425262728from __future__ import unicode_literalsimport numpy as npa = np.arange(1,10)print(a)print(a[:3]) # 123print(a[3:6]) #456print(a[::-1])print(a[:-4:-1]) #987print(a[-4:-7:-1]) # 654print(a[-7::-1]) #321print(a[::])print(a[...])print(a[:])# print(a[]) #errprint(a[::3])b = np.arange(1,25).reshape(2,3,4)print(b)print(b[:,0,0])print(b[0,:,:]) #第0页print('-----------')print(b[0,...])print('---------')print(b[0,1,::2])print(b[:,:,1])print(b[:,1]) # 每一页的第一行print('----------')print(b[-1,1:,2:])print(b[0,2,1:3]) [1 2 3 4 5 6 7 8 9] [1 2 3] [4 5 6] [9 8 7 6 5 4 3 2 1] [9 8 7] [6 5 4] [3 2 1] [1 2 3 4 5 6 7 8 9] [1 2 3 4 5 6 7 8 9] [1 2 3 4 5 6 7 8 9] [1 4 7] [[[ 1 2 3 4] [ 5 6 7 8] [ 9 10 11 12]] [[13 14 15 16] [17 18 19 20] [21 22 23 24]]] [ 1 13] [[ 1 2 3 4] [ 5 6 7 8] [ 9 10 11 12]] ----------- [[ 1 2 3 4] [ 5 6 7 8] [ 9 10 11 12]] --------- [5 7] [[ 2 6 10] [14 18 22]] [[ 5 6 7 8] [17 18 19 20]] ---------- [[19 20] [23 24]] [ 9 10] 9.改变维度 1.视图变维: 针对一个数组对象获取其不同维度的视图数组.reshape(新维度)-&gt;数组的新维度视图数组.revel()-&gt;数组的一维视图2.复制变维: 针对一个数组对象获取其不同维度的副本数组.flatten()-&gt;数组的一维副本 123456789101112from __future__ import unicode_literalsimport numpy as npb = np.arange(1,9)print(b)c = b.reshape(2,2,2)print(c)d = c.ravel()print(d)f = b.reshape(2,2,2).copy()print(f)a += 10print(a,b,c,) [1 2 3 4 5 6 7 8] [[[1 2] [3 4]] [[5 6] [7 8]]] [1 2 3 4 5 6 7 8] [[[1 2] [3 4]] [[5 6] [7 8]]] [21 22 23 24 25 26 27 28 29] [1 2 3 4 5 6 7 8] [[[1 2] [3 4]] [[5 6] [7 8]]] 3.就地变维数组.shape = （新维度)数组.resize(新维度)4.视图转置数组.transpose 12345678910from __future__ import unicode_literalsimport numpy as npb = np.arange(1,24)# b.shape = (2,2,2)# b.reshape(8,1)# print(b.reshape(8,1))# print(b.transpose()) print(b.reshape(-1,1)) [[ 1] [ 2] [ 3] [ 4] [ 5] [ 6] [ 7] [ 8] [ 9] [10] [11] [12] [13] [14] [15] [16] [17] [18] [19] [20] [21] [22] [23]] 10.组合与拆分 1.垂直组合/拆分numpy.vstack((上,下))numpy.vsplit(数组,份数)-&gt;子数组集合2.水平组合/拆分numpy.hstack((左,右))numpy.hsplit(数组,份数)-&gt;子数组集合3.深度组合numpy.dstack((前,后))numpy.dsplit(数组,份数)-&gt;子数组集合 12345678910111213141516171819202122232425from __future__ import unicode_literalsimport numpy as npa = np.arange(11,20).reshape(3,3)print(a)b = np.arange(21,30).reshape(3,3)print(b)print('-------------')c = np.vstack((a,b))print(c)print('------------------')a,b = np.vsplit(c,2)print(a,b,sep='\n$$$$$$$$$\n')c = np.hstack((a,b))print(c)a,b = np.hsplit(c,2)print(a,b,sep='\n--------\n')print('#######################')print(c)print('#######################')a,b = np.dsplit(c,2)print(a,b,sep='\n----\n')print(a.T[0]) [[11 12 13] [14 15 16] [17 18 19]] [[21 22 23] [24 25 26] [27 28 29]] ------------- [[11 12 13] [14 15 16] [17 18 19] [21 22 23] [24 25 26] [27 28 29]] ------------------ [[11 12 13] [14 15 16] [17 18 19]] $$$$$$$$$ [[21 22 23] [24 25 26] [27 28 29]] [[11 12 13 21 22 23] [14 15 16 24 25 26] [17 18 19 27 28 29]] [[11 12 13] [14 15 16] [17 18 19]] -------- [[21 22 23] [24 25 26] [27 28 29]] ####################### [[[11 21] [12 22] [13 23]] [[14 24] [15 25] [16 26]] [[17 27] [18 28] [19 29]]] ####################### [[[11] [12] [13]] [[14] [15] [16]] [[17] [18] [19]]] ---- [[[21] [22] [23]] [[24] [25] [26]] [[27] [28] [29]]] [[11 14 17] [12 15 18] [13 16 19]] 4.行列组合numpy.row_stack((上下))numpy 123456789101112131415from __future__ import unicode_literalsimport numpy as npa = np.arange(11,20).reshape(3,3)b = np.arange(21,30).reshape(3,3)c = np.dstack((a,b))a,b = np.dsplit(c,2)a = a.ravel()b = b.ravel()print(a,b,sep='\n###################\n')# c = np.vstack((a,b))c = np.row_stack((a,b))c = np.c_[a,b]print('###############')print(c) [11 12 13 14 15 16 17 18 19] ################### [21 22 23 24 25 26 27 28 29] ############### [[11 21] [12 22] [13 23] [14 24] [15 25] [16 26] [17 27] [18 28] [19 29]] 11.ndarray类的属性 dtype - 元素类型shape - 数组维度T - 转置视图ndim - 维数size - 元素数,仅对一维数组等价于len()itermsize - 元素字节数nbytes - 总字节数 = size x itemsizeflat - 扁平迭代器real - 实部数组imag - 虚部数组 1234567891011121314151617181920from __future__ import unicode_literalsimport numpy as npa = np.array([ [1+1j,2+4j,3+7j], [4+2j,5+5j,6+8j], [7+3j,8+6j,9+9j]])print(a.dtype,a.dtype.str,a.dtype.char) # complex128类型print(a.shape) # 3行3列print(a.ndim) # 2维print(a.size,len(a)) # 3x3个元素,print(a.itemsize) #元素字节数print(a.nbytes) # 总字节数print(a.T) #转置print(a.real,a.imag,sep='\n##############\n') #实部数组,虚部数组for elem in a.flat: print(elem)print(a.flat[[1,3,5]])a.flat[[2,4,6]] = 0print(a) complex128 &lt;c16 D (3, 3) 2 9 3 16 144 [[1.+1.j 4.+2.j 7.+3.j] [2.+4.j 5.+5.j 8.+6.j] [3.+7.j 6.+8.j 9.+9.j]] [[1. 2. 3.] [4. 5. 6.] [7. 8. 9.]] ############## [[1. 4. 7.] [2. 5. 8.] [3. 6. 9.]] (1+1j) (2+4j) (3+7j) (4+2j) (5+5j) (6+8j) (7+3j) (8+6j) (9+9j) [2.+4.j 4.+2.j 6.+8.j] [[1.+1.j 2.+4.j 0.+0.j] [4.+2.j 0.+0.j 6.+8.j] [0.+0.j 8.+6.j 9.+9.j]] 1234567891011121314from __future__ import unicode_literalsimport numpy as npdef fun(a,b): a.append(b) return ax = np.array([10,20,30])y = 40x = np.array(fun(x.tolist(),y))# x = fun(x.tolist(),y)print(x)x = np.append(x,50)print(x) [10 20 30 40] [10 20 30 40 50] 数据可视化: matplotlib.pyplot(mp) mp.plot(水平坐标数组,垂直坐标数组)x:[1 2 3 4]y:[5 6 7 8] 12345678910from __future__ import unicode_literalsimport numpy as npimport matplotlib.pyplot as mpx = np.linspace(-np.pi,np.pi,10) print(x)cos_y = np.cos(x)/2sin_y = np.sin(x)mp.plot(x,cos_y)#横坐标mp.plot(x,sin_y)#纵坐标mp.show() [-3.14159265 -2.44346095 -1.74532925 -1.04719755 -0.34906585 0.34906585 1.04719755 1.74532925 2.44346095 3.14159265] mp.plot（….,linestyle=线型,linewidth=线宽,color=颜色）例如:mp.plot(x,cos_y,linestyle=’–’,linewidth=10,color=’orangered’) 12345678910from __future__ import unicode_literalsimport numpy as npimport matplotlib.pyplot as mpx = np.linspace(-np.pi,np.pi,20) print(x)cos_y = np.cos(x)/2sin_y = np.sin(x)mp.plot(x,cos_y,linestyle='--',linewidth=10,color='orangered')#横坐标mp.plot(x,sin_y,linestyle='--',color='dodgerblue')#纵坐标mp.show() [-3.14159265 -2.81089869 -2.48020473 -2.14951076 -1.8188168 -1.48812284 -1.15742887 -0.82673491 -0.49604095 -0.16534698 0.16534698 0.49604095 0.82673491 1.15742887 1.48812284 1.8188168 2.14951076 2.48020473 2.81089869 3.14159265] mp.xlim(左边界，右边界)mp.ylim(底边界，顶边界) 123456789101112from __future__ import unicode_literalsimport numpy as npimport matplotlib.pyplot as mpx = np.linspace(-np.pi,np.pi,20) print(x)cos_y = np.cos(x)/2sin_y = np.sin(x)mp.xlim(x.min(),x.max())mp.ylim(sin_y.min(),sin_y.max())mp.plot(x,cos_y,linestyle='--',linewidth=5,color='orangered')mp.plot(x,sin_y,linestyle='--',color='dodgerblue')mp.show() [-3.14159265 -2.81089869 -2.48020473 -2.14951076 -1.8188168 -1.48812284 -1.15742887 -0.82673491 -0.49604095 -0.16534698 0.16534698 0.49604095 0.82673491 1.15742887 1.48812284 1.8188168 2.14951076 2.48020473 2.81089869 3.14159265] mp.xticks(刻度位置数组,刻度文本数组)mp.yticks(刻度位置数组,刻度文本数组)]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Numpy</tag>
        <tag>科学计算</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[scrapy的搭建教程]]></title>
    <url>%2F2018%2F07%2F19%2F%E5%AE%89%E6%8E%92%2F</url>
    <content type="text"><![CDATA[&gt; 安装scrapy 12345678910111213141516171819202122232425262728 1.pip install virtualenv 2.pip install -i https://pypi.douban.com/simple scrapy3.virtualenv scrapytest(虚拟环境名) -- 会建到你终端运行地址下4. C:\Users\Administrator\PycharmProjects\pa\scrapytest\Scripts&gt;avtivate.bat #此路径是自己所创建的路径,仅供参考 deactivate.bat 退出环境 以下同理 也可以直接 avtivate xxx(虚拟环境名称) (linux: source activate 虚拟环境名称) 5.virtualenv -p (python安装路径)\python.exe scrapy3(虚拟环境名称)#实例: 1.virtualenv -p C:\Users\Administrator\AppData\Local\Programs\Python \Python36-32\python.exe scrapy3 2.activate.bat 此方法可以方便的对不同的python版本进行安装虚拟环境,该指令安装好后会自动进 入安装好的环境内 6. pip install virtualenvwrapper-win(window系统需要加上-win) pip install virtualenvwrapper(在新建的环境目录下运行) mkvirtualenv (虚拟环境名) 默认在C盘Administrator/envs下 自定义路径只需添加新的变量 1- workon 列出当前所有环境]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>scrapy</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[shell基础]]></title>
    <url>%2F2018%2F07%2F18%2Fshell%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[1、shell编程 2、解释执行器 1、sh 2、bash ##/etc/passwd查看用户的默认bash,sh解释执行器没有高亮显示,也没有自动补全 3、shell编程 1、所有的shell文件都是以 .sh 结尾 2、执行方式： 1、方式1 1、chmod +x ***.sh 2、./***.sh 2、方式2 sh ***.sh 3、示例 写一个shell文件,t1.sh,要求在用户主目录下创建目录AID18/mydir1,执行t1.sh验证结果 4、shell基础 1、变量赋值 1、变量名=值 ## 注意 ：= 两侧不能有空格,name=&quot;张三丰&quot; 2、赋值方式 1、直接赋值 x=10 y=20 2、获取命令的执行结果给变量赋值 1、time=$(date) 2、time=`date` 3、接收从键盘输入的字符给变量赋值 read -p &quot;提示信息&quot; -t 5 变量名 3、输出语句 echo $变量名 4、&apos;&apos; 和 &quot;&quot; 的区别 1、&apos;&apos; 无法获取变量的值 2、&quot;&quot; 可以获取变量的值 read -p &quot;请输入姓名:&quot; -t 5 name echo &apos;变量$name的值是：&apos;$name 请输入姓名:金毛狮王 变量$name的值是：金毛狮王 5、撤销变量 unset 变量名 5、运算符 1、算术运算符 + - * / % ++ : 自加1运算,类似于python中 i++ 等同于 i+=1 -- : 同++ 运算命令： 1、let 运算表达式 i=1 let i++ echo $i 2、expr 运算表达式 i=1 sum=`expr $i + 5` # +两侧要有空格 echo $sum 2、比较运算符 1、文件状态 -e ：文件/目录是否存在 -d : 判断是否为目录 -f : 判断是否为文件 2、字符比较 = 、!= 空 ：-z 非空 ：!-z 或者 -n 3、数值比较 等于 ：-eq 大于 ：-gt &gt;= ：-ge &lt; ：-lt &lt;= ：-le 不等于：-ne 4、逻辑比较 逻辑与 ：&amp;&amp; python中and 逻辑或 ：|| python中or 6、if条件判断 1、语法格式 if [ 条件判断 ];then ## 条件判断两侧要加 空格 执行语句 fi 2、多分支 if [ 条件判断 ];then 执行语句 elif [ ];then 执行语句 ... else 执行语句 fi 3、输入两个数字,比较大小 #!/bin/bash read -p &quot;请输入第一个数字:&quot; num1 read -p &quot;请输入第二个数字:&quot; num2 if [ $num1 -gt $num2 ];then echo &quot;$num1&gt;$num2&quot; elif [ $num1 -lt $num2 ];then echo &quot;$num1&lt;$num2&quot; else echo &quot;$num1=$num2&quot; fi 7、for循环1 1、语法格式 for 变量名 in 值列表 do 执行语句 done 2、造数方法 seq 起始值 步长 终止值 seq 5 --&gt; 1 2 3 4 5 seq 1 2 10 --&gt; 1 3 5 7 9 seq 2 2 10 --&gt; 2 4 6 8 10 8、C-for循环 1、语法格式 for ((赋初值;条件判断;步长)) do 执行语句 done 2、输出1-5之间的整数 #!/bin/bash for ((i=1;i&lt;=5;i++)) do echo $i done 3、输出20-47之间的偶数 #!/bin/bash for((i=20;i&lt;=47;i++)) do if [ `expr $i % 2` -eq 0 ];then echo $i fi done 1、进入周期性计划任务设置 $ crontab -e 按 4 2、设置周期性计划任务 * * * * * python3 /home/tarena/python/01.py * * * * * sh /home/tarena/sh/01.sh 分时日月周 分 ：0-59 时 ：0-23 日 ：1-31 月 ：1-12 周 ：0-6 * ：代表所有可能值 , ：指定多个时间点 * * 1,5 * * 每月的1日和5日两天 / ：指定时间间隔频率 */10 * * * * 表示每10分钟执行一次命令 - ：指定一个时间段 0 0-6/1 * * * 表示0点-6点没小时执行一次命令 3、每分钟执行一次 01.py 文件 * * * * * python3 .../01.py 4、每小时的第3分钟和第15分钟执行 3,15 * * * * python3 .../01.py 5、每周六、周日的0点执行一个 01.py 文件 0 0 * * 6,0 python3 ..../01.py 6、每天18:00到23:00之间每小时执行 01.py 文件 0 18-23/1 * * * python3 .../01.py 2、设置开机启动 1、编写程序文件 .sh 2、把文件拷贝到 /etc/init.d/ 3、修改文件权限(可执行权限) chmod 755 文件名 r : 4 w : 2 x : 1 4、将程序文件放到启动项中 sudo update-rc.d ***.sh defalts 90 ## 90表示优先级,数字越大表示启动越晚 5、重启Linux操作系统 reboot 或者 init 6 3、取消开机启动 sudo update-rc.d -f ***.sh remove 4、while循环 1、语法格式 while [ 条件 ] do 执行语句 done 2、打印1-10之间的整数 #!/bin/bash x=1 while [ $x -le 10 ] do echo $x let x++ done 5、until循环 1、特点 条件判断不成立时执行循环体,成立时循环结束 2、把176.136.10.10-15内不在线的IP输出来 #!/bin/bash x=10 until [ $x -gt 15 ] do ping -c 2 176.136.10.$x &amp;&gt; /dev/null if [ $? -ne 0 ];then echo &quot;176.136.10.$x&quot; fi let x++ done case 分支结构 1、根据变量值的不同执行不同的操作 2、语法格式 case $变量名 in 模式1) 代码块 ;; 模式2) 代码块 ;; ... ... *) 代码块 ;; esac 3、例 输入一个字符,判断是数字、字母还是其他字符 #!/bin/bash read -p &quot;请输入一个字符:&quot; char case $char in [a-z]|[A-Z]) echo &quot;字母&quot; ;; [0-9]) echo &quot;数字&quot; ;; *) echo &quot;其他字符&quot; ;; esac 2、函数 1、语法格式 函数名(){ 代码块 } 函数名 ##函数调用,不能加() 2、输出10个* #!/bin/bash star(){ echo &quot;**********&quot; } star #函数调用 3、在用户主目录下创建一个目录,如果存在则提示,否则提示创建成功 #!/bin/bash is_directory(){ read -p &quot;请输入要创建的目录名称:&quot; dir if [ -d /home/tarena/$dir ];then echo &quot;该目录已存在&quot; else mkdir /home/tarena/$dir echo &quot;目录 /home/tarena/$dir 创建成功&quot; fi } is_directory 3、命令行参数 ./t1.sh 1 2 3 $0 : 本身 ./t1.sh $1 : 第1个参数 1 $2 : 第2个参数 2 $3 : 第3个参数 3 $? : 上一条命令执行结果,0成功,非0执行失败 计算2个数的和 #!/bin/bash echo `expr $1 + $2` 4、sed(文本处理工具-Linux) 1、打印 p sed -n &apos;p&apos; a.txt ##打印文件中所有内容 sed -n &apos;1p&apos; a.txt ##打印第1行 sed -n &apos;1,4p&apos; a.txt ##打印1-4行 sed -n &apos;1p;5p&apos; a.txt ##打印第1行和第5行 2、删除 d sed -i &apos;1d&apos; a.txt ##删除第1行内容 sed -i &apos;$d&apos; a.txt ##删除最后1行内容 sed -i &apos;1,3d&apos; a.txt ##删除1-3行 sed -i &apos;1d;3d&apos; a.txt ##删除第1行和第3行 3、替换(整行替换) c sed -i &apos;c内容&apos; a.txt sed -i &apos;条件c内容&apos; a.txt sed -i &apos;1,3c将进酒&apos; a.txt ##1-3行替换为将进酒 sed -i -e &apos;1c李白&apos; -e &apos;2c杜甫&apos; a.txt 4、添加 a/i a : 在当前处理行的下方添加新行 i ：在当前处理行的上方添加新行 sed -i &apos;atiger&apos; a.txt ##所有行下方都添加tiger sed -i &apos;1alion&apos; a.txt ##第一行下方添加 sed -i &apos;1irabbit&apos; a.txt ##第一行上方添加 5、替换 s sed -i 条件s/旧内容/新内容/选项 选项 ：g 表示全局替换 i 忽略字母大小写替换 sed -i &apos;1,3s/6/A/g&apos; a.txt ##1-3行中6全部变为8 sed -i &apos;s/[0-9]/B/g&apos; a.txt ##文本中所有数字B sed -i &apos;s/[0-9]\+/C/g&apos; a.txt ##把文本中连续出现的数字替换为C ** 加 g 表示全部替换,不加 g 只会替换指定行中的第一个]]></content>
      <categories>
        <category>shell</category>
      </categories>
      <tags>
        <tag>shell命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux命令]]></title>
    <url>%2F2018%2F07%2F18%2FLinux%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[常用Linux系统 RedHat CentOS Ubuntu Linux常用命令 1、ifconfig (windows ipconfig) 查看本机IP地址及MAC地址 2、ping 测试网络连通性 -c 可指定连接次数 ：ping 192.168.3.1 -c 3 3.nslookup 解析域名对应的ip地址 nslookup www.baidu.com 4.重启网卡 sudo /etc/init.d/networking restart 5.top 1.作用 Linux下的任务管理器,动态显示当前所有进程CPU及内存使用率,q退出 6. ps -aux 1.显示系统进程的命令(PID号) ps -aux | grep &apos;mysql&apos; 7. kill 1.作用: 杀死一个进程 2.sudo kill -9 进程PID号 --- 强制杀死 8.ssh 1.作用: 远程连接到服务器 2.格式: ssh 用户名@IP地址 9. scp 1.作用 : 远程复制文件/目录 2.格式: scp 文件名 用户名@IP地址:/home/root scp -r /abc/abc 用户名@IP地址:/home/root 可以复制目录过去 scp -r 用户名@IP地址:/目录名/目录名 本地目录名 从服务器上下载到本地 10. wc -l 1.作用: 统计文件的行数 2.示例: wc -l /etc/passwd 11. sort(排序) 1.对文件中内容进行排序 2.sort文件名 12. uniq -c 1.去除重复行,并统计每行出现的次数(相邻行) 2.用法: sort 文件名 | uniq -c #运维工具 1.xshell 2. window &lt;-&gt; linux 1.安装lrzsz sudo apt-get install lrzsz 2.Windows -&gt; Linux xshell终端执行 ： $rz 上传 3. Linux -&gt; Windows xshell终端执行: $sz 文件名 下载(必须为文件名,如果为目录则可以先压缩) 常用Linux命令补充 1、df -h 查看磁盘使用情况 2、chmod 修改文件权限 chmod +x 文件名 chmod 644 文件名]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[治愈插画]]></title>
    <url>%2F2018%2F07%2F17%2Fqinggan2%2F</url>
    <content type="text"><![CDATA[总有一束光能照亮我们的生活。作者：韩国插画师endmion1 （转）]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>美图</tag>
        <tag>插画</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[备忘]]></title>
    <url>%2F2018%2F07%2F17%2Fqinggan1%2F</url>
    <content type="text"><![CDATA[1234567sys.path.insert(0,os.path.join(base_dir,apps))sys.path.insert() 向系统搜索路径中添加搜索目录,程序退出后,即撤销base_dir 当前工作的根目录os.path.join() 将返回的路径进行拼接，拼成一个路径os.path.dirname(os.path.abspath(__file__)) 获取当前文件的父文件夹os.path.abspath(__file__) 获取当前文件的路径 123pip install -i http://pypi.douban.com/simple 模块名 linux和windowssudo apt-get install libmysqlclient-dev 乌班图sudo yum install python-devel mysql-devel centos 12345678#span_username &#123; color: #f00; font-size: 14px; &#123;#display: none;#&#125; &#125; .green&#123; color:green !important; #!importtant 重要的 以这个Class为主 &#125; 12source fruitdayenv/bin/activate linux 切换当前虚拟环境activete xxxxx windows切换环境 Django ==========================================12345(加密模块)from django.contrib.auth.hashers import make_password,check_passwordnew_user_pwd = make_password(request.POST.get('user_pwd'), None, 'pbkdf2_sha1')new_user_pwd = make_password(request.POST.get('user_pwd'), 'abc', 'pbkdf2_sha1') 12cenos firewall 防火墙增加3306对外开放的权限firewall-cmd --add-port=3306/tcp ==============================mysql===============12345create database if not exists fsl default charset utf8 collate utf8_general_ci;select ip,port from proxy_iporder by RAND() #随机LIMIT 1 # 取1个 如果存在则更新,如果不存在则新增 插入更新语句 –当插入相同的数据时,只更新插入以下这些值 这些值是VALUES传入的(%s）123456789101112131415 content=VALUES (content), praise_num=VALUES (praise_num), comments_num=VALUES (comments_num), update_time=VALUES (update_time) 实例: &quot;&quot;&quot;insert into zhihu_answer(author_id,content,praise_num,comments_num,create_time,update_time) VALUES (%s,%s,%s,%s,%s,%s,) ON DUPLICATE KEY UPDATE content=VALUES (content), praise_num=VALUES (praise_num), comments_num=VALUES (comments_num), update_time=VALUES (update_time) &quot;&quot;&quot; ===============================scrapy==============123456789101112131415scrapy startproject 项目名scrapy genspider 应用名称 爬取网址scrapy genspider -t 模板(比如crawl) 应用名称 爬取网址创建调试程序main.pyfrom scrapy.cmdline import executeimport sysimport ossys.path.append(os.path.dirname(os.path.abspath(__file__)))- scrapy(命令) crawl(爬取) demo(爬取name,jobbole的name)- execute(['scrapy','crawl','应用名称']) 12345678910111213pip install fake-useragent # from fake_useragent import UserAgent&gt;ua = UserAgent()&gt;ua.ie IE浏览器&gt;ua.opera opera 浏览器&gt;ua.chrome chrome浏览器&gt;ua.google google浏览器&gt;ua['google chrome'] &gt;ua.firefox 火狐浏览器&gt;ua.ff&gt;ua.safari safari浏览器&gt;ua.random 随机 百度搜索: pypi fake-useragent 查询版本 fake-useragent.hreokuapp.com/browser/版本号西刺免费ip代理]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>mysql</tag>
        <tag>Django</tag>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【逗鱼时刻】第159期 生于惊奇 死于针奇]]></title>
    <url>%2F2018%2F07%2F17%2Fshenghuo%2F</url>
    <content type="text"><![CDATA[【逗鱼时刻】第159期 生于惊奇 死于针奇]]></content>
      <categories>
        <category>趣事乐闻</category>
      </categories>
      <tags>
        <tag>生活随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[斯人若彩虹,遇上方知有。]]></title>
    <url>%2F2018%2F07%2F16%2F92637%2F</url>
    <content type="text"><![CDATA[愿你如三月的春风，六月的细雨，九月的骄阳，冬月的初雪。愿你此生都可以像我们初见时那般耀眼。 有些人如暗淡无光， 有些人闪亮如丝绸, 有些人更亮如油彩。 但人生中总有一些时候，你会遇到一个由外散发五彩光芒的人。 遇到以后，你就知道前面的丝绸和油彩完全比不上。 斯人若彩虹，遇上方知有希望曾让你怦然心动的人，最后都能陪在你身边祝所有有情人终成眷属 下面是一些不同的人对于“斯人若彩虹,遇上方知有”的评论 &gt; 土拨鼠家的啊: 遇上了一个人，你根本没有想到会遇上这样的人，他又努力又谦虚，特别温和又特别有力，那种身上散发出来的蓬勃生命力无时无刻不在感染着你，给你带来正能量，让你也有更多动力去追求更好的生活和自己。他是这么好，但是他对你更加的好，要带你去看晴空万里，为你剥小龙虾，帮你要奥运冠军的签名，推掉一切不重要的事情只为赴你之约。他就是偏爱你，想尽一切办法为你创造美好。他鼓励你，支持你，告诉你你在他心里永远最优秀最美丽。他所有的爱所有的好都让&gt;你变得更加可爱，更加自信。斯人若彩虹，遇上方知有。我没有遇到之前我也不相信，等我真正遇到了我才感慨缘分这么奇妙，生命如此美好。 &gt; 东林街亭: 斯人若彩虹，遇上方知有。但不代表两个人都如彩虹，即便对方如乌云，如雨滴，也能守得云开见艳阳，是彩虹可以做到的事。 &gt; 郎未凉： 谢谢你，让我再一次翻到了人生的那些美好。 下面是诠释这个诗句的一个故事：有一种初恋，叫做一见钟情；孩提时她第一眼见到男孩，她觉得他就是他的挚爱，虽然她并不明白什么是爱；男孩对其不感冒，厌&gt; 恶、逃避，在她看来都变成了害羞与不善表达；一切误解与阴差阳错，多么单纯盲目，又多么美丽；心动就是心动，喜欢就是喜欢，简单又纯粹。有些人，是整体大于部分之和，有些人则正好相反；男孩一双清澈蔚蓝的明眸当初令女孩深深地沉醉，以至于使她忽略了其他；事实上，男孩除了俊美的外表，性格何等懦弱，对她的感情何等无视，弃之如敝履―――他那些美好的部分加起来，远远大于整体，他的整体显得如此苍白。生活中，我们许多时候何尝不是如此；我们只注意别人的一部分，例如美丽的容颜，曼妙的身材，又或者显赫的身世，殷实的家底；而最重要的，学识、人品、性格，整体的本质，我们视而不见。从前看《倚天屠龙记》，殷素素临死前对小无忌叮嘱：孩子，要记住，以后千万提防漂亮的女人，越是好看的女人越会骗人；当年少不经事的我看到这个情节，感觉何其可笑，直到多年以后历尽风雨，身心俱疲的我又再回想起这段话，才猛然发觉―――何其可笑的，原来是自己。诚如一叶障目，不见泰山；男孩当初眼中只看见女孩并不漂亮，家境也窘迫；整天似个讨厌鬼神经质地缠着他，一切都是那么古怪，令其避之唯恐不及；但唯独他没有看见的，是女孩自信、坚强、独立、高贵的人格，还有对他执着又真诚的爱。两人渐渐地长大，女孩的情深一如既往，不离不弃；但她也渐渐地发觉男孩并不爱她，甚至连喜欢都没有―――原来一切只是自己自作多情，在自己拼死捍卫那棵即将倒下的梧桐树时，男孩不屑地看了她一眼就上了校车；男孩每天假装高兴地收下她送来的鸡蛋，转身却把它原封不动地扔进垃圾箱；在图书馆里，男孩为了迎合自己兄弟的想法而贬低女孩的家人与生活，更令女孩伤心兼气愤不已；而男孩受父亲影响对女孩一家深深的成见，都让女孩重新审视自己的感情。爱情不仅仅是一见钟情，那一刹那间的心动，并不能永远支持这棵大树的郁郁葱葱；更多的，它来源于两个人不断深入的互相了解与认知；岁月如梭，当两人互相懂得，两人即永远。 如果可以和相知的ta在一起的话，多么希望那个人就是我。]]></content>
      <categories>
        <category>个人情感</category>
      </categories>
      <tags>
        <tag>个人情感</tag>
      </tags>
  </entry>
</search>
